createGrade input fields
gradeName
maxSectionSize
admissionFees
tutionFees
latePaymentFine
furnitureFees
conveyanceCharges
developmentFees
computerFees
baseTransportFee,
baseDist,
offsetTransportFee,
offsetDist,
fixedMonthlyFee,


/////////////////////////StudentSchema/////////////////////////
studentName
fatherName
motherName
permanentAddr
presentAddr
religion
sex
DOB
DOA
registrationNumber
nationality
grade
section
roll
mobileNumber
transportChosen
houseDistance
feesPaid
feesTotal
feeScheme
discountPercent
fatherQualification
fatherProfession
fatherPhoto
fatherAadhar
motherQualification
motherProfession
motherPhoto
motherAadhaar
marriageAnniversary
childAadhaar
childPhoto
height
weight
bloodGroup
previousSchool
termCert
charCert

/////////////////////////Admit Student Form input fields/////////////////////////
studentName
fatherName
motherName
permanentAddr
presentAddr
religion
sex
DOB
nationality
grade
mobileNumber
transportChosen
houseDistance
feeScheme
fatherQualification
fatherProfession
fatherPhoto
fatherAadhar
motherQualification
motherProfession
motherPhoto
motherAadhaar
marriageAnniversary
childAadhaar
childPhoto
height
weight
bloodGroup
previousSchool
termCert
charCert
///////fields to be determined and populated at the backend after form submission
DOA
registrationNumber
section
roll
feesPaid
feesTotal
discountPercent



/////////////////////////////USER SCHEMA/////////////////////////////////////////
uname
email
encry_password
role
subject
contactNumber
aadhaarNum

token --> eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MThlNGMzNjY2Y2Y0NzIxNmJmYjE0NTciLCJpYXQiOjE2MzkwMjkzOTJ9.o1pB0GfLaGhqTa7SI1ZehX01-l8EcZjI_yn8SK8LU10

`   
    <tr>
    <th>${i + 1}%></th>
    <td>${students[i].registrationNumber}%></td>
    <td>${students[i].studentName}%></td>
    <td>${students[i].grade}%></td>
    <td><input type="checkbox" /></td>
    </tr>
`

.appendChild(
              `<button type="submit" class="btn btn-primary btn-block">Admit</button>`
            );

useEffect(() => {
    const url = "/allGrades";
    const token =
      "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MThlNGMzNjY2Y2Y0NzIxNmJmYjE0NTciLCJpYXQiOjE2Mzg3NjQzMTV9.VZkgOWV1VCH0DNq4of2TRIKBieV6L9zvKHxmyo0thog";
    console.log("OBJECT");
    fetch(url, {
      method: "GET", // *GET, POST, PUT, DELETE, etc.
      mode: "cors", // no-cors, *cors, same-origin
      cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
      credentials: "same-origin", // include, *same-origin, omit
      headers: {
        "Content-Type": "application/json",
        Authentication: "Bearer " + token,
        // 'Content-Type': 'application/x-www-form-urlencoded',
      },
      redirect: "follow", // manual, *follow, error
      referrerPolicy: "no-referrer",
    })
      .then((response) => response.json())
      .then((data) => console.log(data));
  }, []);


YUP
test(
      "fileFormat",
      "Images only",
      (value) => value && ALLOWED_IMG_EXTN.includes(value.type)
    )

const admissionForm = () => {
    return (
      <div className="d-flex align-items-center justify-content-center flex-column">
        <h1 className="mt-5">Student Admission </h1>
        <div className="border border-danger border-5 my-5 p-5 w-50 rounded">
          <div className="container d-flex flex-column">
            <form
              action="/admitStudent"
              method="POST"
              encType="multipart/form-data"
              onSubmit={handleSubmit(testSubmit)}
            >
              <div className="row mb-3">
                <label
                  htmlFor="studentName"
                  className="col-sm-3 col-form-label"
                >
                  Student Name
                </label>
                <div className="col-sm-7">
                  <input
                    type="text"
                    className="form-control"
                    {...register("studentName", {
                      required: "First name is required",
                      minLength: {
                        value: 7,
                        message: "First Name must be atleast 7 characters long",
                      },
                      maxLength: {
                        value: 60,
                        message:
                          "First Name must be shorter than 60 characters",
                      },
                    })}
                  />
                </div>
                {errors.studentName && (
                  <span className="alert alert-danger">
                    {errors.studentName.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label htmlFor="fatherName" className="col-sm-3 col-form-label">
                  Father Name
                </label>
                <div className="col-sm-7">
                  <input
                    type="text"
                    className="form-control"
                    {...register("fatherName", {
                      required: "Father Name is required",
                      minLength: {
                        value: 7,
                        message:
                          "Father Name must be atleast 7 characters long",
                      },
                      maxLength: {
                        value: 60,
                        message:
                          "Father Name must be shorter than 60 characters",
                      },
                    })}
                  />
                </div>
                {errors.fatherName && (
                  <span className="alert alert-danger">
                    {errors.fatherName.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label htmlFor="motherName" className="col-sm-3 col-form-label">
                  Mother Name
                </label>
                <div className="col-sm-7">
                  <input
                    type="text"
                    className="form-control"
                    {...register("motherName", {
                      required: "motherName Name is required",
                      minLength: {
                        value: 7,
                        message:
                          "motherName Name must be atleast 7 characters long",
                      },
                      maxLength: {
                        value: 60,
                        message:
                          "motherName Name must be shorter than 60 characters",
                      },
                    })}
                  />
                </div>
                {errors.motherName && (
                  <span className="alert alert-danger">
                    {errors.motherName.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label
                  htmlFor="presentAddr"
                  className="col-sm-3 col-form-label"
                >
                  Present Address
                </label>
                <div className="col-sm-7">
                  <input
                    type="text"
                    className="form-control"
                    {...register("presentAddr", {
                      required: "presentAddr is required",
                      minLength: {
                        value: 7,
                        message:
                          "presentAddr must be atleast 7 characters long",
                      },
                      maxLength: {
                        value: 100,
                        message:
                          "presentAddr must be shorter than 100 characters",
                      },
                    })}
                  />
                </div>
                {errors.presentAddr && (
                  <span className="alert alert-danger">
                    {errors.presentAddr.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label
                  htmlFor="permanentAddr"
                  className="col-sm-3 col-form-label"
                >
                  Permanent Address
                </label>
                <div className="col-sm-7">
                  <input
                    type="text"
                    className="form-control"
                    {...register("permanentAddr", {
                      required: "permanentAddr is required",
                      minLength: {
                        value: 7,
                        message:
                          "permanentAddr must be atleast 7 characters long",
                      },
                      maxLength: {
                        value: 100,
                        message:
                          "permanentAddr must be shorter than 100 characters",
                      },
                    })}
                  />
                </div>
                {errors.permanentAddr && (
                  <span className="alert alert-danger">
                    {errors.permanentAddr.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label htmlFor="religion" className="col-sm-3 col-form-label">
                  Religion
                </label>
                <div className="col-sm-7">
                  <select
                    className="form-control"
                    {...register("religion", {
                      required: "religion is required",
                    })}
                  >
                    <option value="HINDU">HINDU</option>
                    <option value="MOMEDIAN">MOMEDIAN</option>
                    <option value="OTHER">OTHER</option>
                  </select>
                </div>
                {errors.religion && (
                  <span className="alert alert-danger">
                    {errors.religion.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label htmlFor="sex" className="col-sm-3 col-form-label">
                  Gender
                </label>
                <div className="col-sm-7">
                  <select
                    className="form-control"
                    id="sex"
                    {...register("sex", {
                      required: "gender is required",
                    })}
                  >
                    <option value="MALE">Male</option>
                    <option value="FEMALE">Female</option>
                    <option value="OTHER">Other</option>
                  </select>
                </div>
                {errors.sex && (
                  <span className="alert alert-danger">
                    {errors.sex.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label htmlFor="DOB" className="col-sm-3 col-form-label">
                  Date of Birth
                </label>
                <div className="col-sm-7">
                  <input
                    type="date"
                    className="form-control"
                    {...register("DOB", {
                      required: "Date of Birth is required",
                      validate: checkAtleast3Years,
                    })}
                  />
                </div>
                {errors.DOB && (
                  <span className="alert alert-danger">
                    {errors.DOB.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label
                  htmlFor="nationality"
                  className="col-sm-3 col-form-label"
                >
                  Nationality
                </label>
                <div className="col-sm-7">
                  <select
                    className="form-control"
                    id="nationality"
                    {...register("nationality", {
                      required: "nationality is required",
                    })}
                  >
                    <option value="INDIAN">Indian</option>
                    <option value="NRI">NRI</option>
                    <option value="OTHER">Other</option>
                  </select>
                </div>
                {errors.nationality && (
                  <span className="alert alert-danger">
                    {errors.nationality.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label htmlFor="grade" className="col-sm-3 col-form-label">
                  Grade
                </label>
                <div className="col-sm-7">
                  <select
                    className="form-control"
                    id="grade"
                    {...register("grade", {
                      required: "grade is required",
                    })}
                  >
                    {getGradeOptionList()}
                  </select>
                </div>
                {errors.grade && (
                  <span className="alert alert-danger">
                    {errors.grade.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label
                  htmlFor="mobileNumber"
                  className="col-sm-3 col-form-label"
                >
                  Mobile Number
                </label>
                <div className="col-sm-7">
                  <input
                    type="text"
                    className="form-control"
                    {...register("mobileNumber", {
                      required: "mobileNumber is required",
                      pattern: {
                        value: /^\d{10}$/i,
                        message: "Invalid Mobile Number",
                      },
                    })}
                  />
                </div>
                {errors.mobileNumber && (
                  <span className="alert alert-danger">
                    {errors.mobileNumber.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label
                  htmlFor="transportChosen"
                  className="col-sm-3 col-form-label"
                >
                  Transport Opted
                </label>
                <div className="col-sm-7">
                  <input
                    type="checkbox"
                    className="form-check-input w-25 h-100"
                    {...register("transportChosen", {
                      required: "transportChosen is required",
                    })}
                  />
                </div>
                {errors.transportChosen && (
                  <span className="alert alert-danger">
                    {errors.transportChosen.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label
                  htmlFor="houseDistance"
                  className="col-sm-3 col-form-label"
                >
                  House Distance(in Km)
                </label>
                <div className="col-sm-7">
                  <input
                    type="number"
                    className="form-control"
                    {...register("houseDistance", {
                      required: "houseDistance is required",
                      min: 0,
                      max: 50,
                    })}
                  />
                </div>
                {errors.houseDistance && (
                  <span className="alert alert-danger">
                    {errors.houseDistance.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label htmlFor="feeScheme" className="col-sm-3 col-form-label">
                  Fee Scheme
                </label>
                <div className="col-sm-7">
                  <select
                    className="form-control"
                    id="feeScheme"
                    {...register("feeScheme")}
                  >
                    <option value="1TIMEPAY">1 Time Pay</option>
                    <option value="2TIMEPAY">2 Time Pay</option>
                    <option value="3TIMEPAY">3 Time Pay</option>
                    <option value="OTHER">OTHER</option>
                  </select>
                </div>
                {errors.feeScheme && (
                  <span className="alert alert-danger">
                    {errors.feeScheme.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label
                  htmlFor="fatherQualification"
                  className="col-sm-3 col-form-label"
                >
                  Father Qualification
                </label>
                <div className="col-sm-7">
                  <input
                    type="text"
                    className="form-control"
                    {...register("fatherQualification", {
                      required: "fatherQualification is required",
                      minLength: {
                        value: 7,
                        message:
                          "fatherQualification must be atleast 7 characters long",
                      },
                      maxLength: {
                        value: 40,
                        message:
                          "fatherQualification must be shorter than 40 characters",
                      },
                    })}
                  />
                </div>
                {errors.fatherQualification && (
                  <span className="alert alert-danger">
                    {errors.fatherQualification.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label
                  htmlFor="fatherProfession"
                  className="col-sm-3 col-form-label"
                >
                  Father Profession
                </label>
                <div className="col-sm-7">
                  <input
                    type="text"
                    className="form-control"
                    {...register("fatherProfession", {
                      required: "fatherProfession is required",
                      minLength: {
                        value: 7,
                        message:
                          "fatherProfession must be atleast 7 characters long",
                      },
                      maxLength: {
                        value: 40,
                        message:
                          "fatherProfession must be shorter than 40 characters",
                      },
                    })}
                  />
                </div>
                {errors.fatherProfession && (
                  <span className="alert alert-danger">
                    {errors.fatherProfession.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label
                  htmlFor="fatherPhoto"
                  className="col-sm-3 col-form-label"
                >
                  Father Photo
                </label>
                <div className="col-sm-7">
                  <input
                    type="file"
                    className="form-control"
                    {...register("fatherPhoto")}
                  />
                </div>
                {errors.fatherPhoto && (
                  <span className="alert alert-danger">
                    {errors.fatherPhoto.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label
                  htmlFor="fatherAadhar"
                  className="col-sm-3 col-form-label"
                >
                  Father Aadhar
                </label>
                <div className="col-sm-7">
                  <input
                    type="text"
                    className="form-control"
                    {...register("fatherAadhar", {
                      required: "fatherAadhar is required",
                      pattern: {
                        value: /^\d{12}$/i,
                        message: "Invalid Aadhar Number",
                      },
                    })}
                  />
                </div>
                {errors.fatherAadhar && (
                  <span className="alert alert-danger">
                    {errors.fatherAadhar.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label
                  htmlFor="motherQualification"
                  className="col-sm-3 col-form-label"
                >
                  Mother Qualification
                </label>
                <div className="col-sm-7">
                  <input
                    type="text"
                    className="form-control"
                    {...register("motherQualification", {
                      required: "motherQualification is required",
                      minLength: {
                        value: 7,
                        message:
                          "motherQualification must be atleast 7 characters long",
                      },
                      maxLength: {
                        value: 40,
                        message:
                          "motherQualification must be shorter than 40 characters",
                      },
                    })}
                  />
                </div>
                {errors.motherQualification && (
                  <span className="alert alert-danger">
                    {errors.motherQualification.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label
                  htmlFor="motherProfession"
                  className="col-sm-3 col-form-label"
                >
                  Mother Profession
                </label>
                <div className="col-sm-7">
                  <input
                    type="text"
                    className="form-control"
                    {...register("motherProfession", {
                      required: "motherProfession is required",
                      minLength: {
                        value: 7,
                        message:
                          "motherProfession must be atleast 7 characters long",
                      },
                      maxLength: {
                        value: 40,
                        message:
                          "motherProfession must be shorter than 40 characters",
                      },
                    })}
                  />
                </div>
                {errors.motherProfession && (
                  <span className="alert alert-danger">
                    {errors.motherProfession.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label
                  htmlFor="motherPhoto"
                  className="col-sm-3 col-form-label"
                >
                  Mother Photo
                </label>
                <div className="col-sm-7">
                  <input
                    type="file"
                    className="form-control"
                    {...register("motherPhoto")}
                  />
                </div>
                {errors.motherPhoto && (
                  <span className="alert alert-danger">
                    {errors.motherPhoto.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label
                  htmlFor="motherAadhaar"
                  className="col-sm-3 col-form-label"
                >
                  Mother Aadhaar
                </label>
                <div className="col-sm-7">
                  <input
                    type="text"
                    className="form-control"
                    {...register("motherAadhaar", {
                      required: "motherAadhaar is required",
                      pattern: {
                        value: /^\d{12}$/i,
                        message: "Invalid Aadhar Number",
                      },
                    })}
                  />
                </div>
                {errors.motherAadhaar && (
                  <span className="alert alert-danger">
                    {errors.motherAadhaar.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label
                  htmlFor="marriageAnniversary"
                  className="col-sm-3 col-form-label"
                >
                  Marriage Anniversary
                </label>
                <div className="col-sm-7">
                  <input
                    type="date"
                    className="form-control"
                    {...register("marriageAnniversary", {
                      required: "marriageAnniversary is required",
                    })}
                  />
                </div>
                {errors.marriageAnniversary && (
                  <span className="alert alert-danger">
                    {errors.marriageAnniversary.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label
                  htmlFor="childAadhaar"
                  className="col-sm-3 col-form-label"
                >
                  Child Aadhaar
                </label>
                <div className="col-sm-7">
                  <input
                    type="text"
                    className="form-control"
                    {...register("childAadhaar", {
                      required: "childAadhaar is required",
                      pattern: {
                        value: /^\d{12}$/i,
                        message: "Invalid Aadhar Number",
                      },
                    })}
                  />
                </div>
                {errors.childAadhaar && (
                  <span className="alert alert-danger">
                    {errors.childAadhaar.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label htmlFor="childPhoto" className="col-sm-3 col-form-label">
                  Child Photo
                </label>
                <div className="col-sm-7">
                  <input
                    type="file"
                    className="form-control"
                    {...register("childPhoto")}
                  />
                </div>
                {errors.childPhoto && (
                  <span className="alert alert-danger">
                    {errors.childPhoto.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label htmlFor="height" className="col-sm-3 col-form-label">
                  Child Height(in feet)
                </label>
                <div className="col-sm-7">
                  <input
                    type="number"
                    className="form-control"
                    {...register("height", {
                      required: "height is required",
                      min: 2,
                      max: 8,
                    })}
                  />
                </div>
                {errors.height && (
                  <span className="alert alert-danger">
                    {errors.height.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label htmlFor="weight" className="col-sm-3 col-form-label">
                  Child Weight(in Kg)
                </label>
                <div className="col-sm-7">
                  <input
                    type="number"
                    className="form-control"
                    {...register("weight", {
                      required: "weight is required",
                      min: 20,
                      max: 100,
                    })}
                  />
                </div>
                {errors.weight && (
                  <span className="alert alert-danger">
                    {errors.weight.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label htmlFor="bloodGroup" className="col-sm-3 col-form-label">
                  Child Blood Group
                </label>
                <div className="col-sm-7">
                  <select
                    className="form-control"
                    id="bloodGroup"
                    {...register("bloodGroup", {
                      required: "bloodGroup is required",
                    })}
                  >
                    <option value="A+">A+</option>
                    <option value="B+">B+</option>
                    <option value="AB+">AB+</option>
                    <option value="O+">O+</option>
                    <option value="A-">A-</option>
                    <option value="B-">B-</option>
                    <option value="AB-">AB-</option>
                    <option value="O-">O-</option>
                  </select>
                </div>
                {errors.bloodGroup && (
                  <span className="alert alert-danger">
                    {errors.bloodGroup.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label htmlFor="termCert" className="col-sm-3 col-form-label">
                  Termination Certificate
                </label>
                <div className="col-sm-7">
                  <input
                    type="file"
                    className="form-control"
                    {...register("termCert")}
                  />
                </div>
                {errors.termCert && (
                  <span className="alert alert-danger">
                    {errors.termCert.message}
                  </span>
                )}
              </div>
              <div className="row mb-3">
                <label htmlFor="charCert" className="col-sm-3 col-form-label">
                  Character Certificate
                </label>
                <div className="col-sm-7">
                  <input
                    type="file"
                    className="form-control"
                    {...register("charCert")}
                  />
                </div>
                {errors.charCert && (
                  <span className="alert alert-danger">
                    {errors.charCert.message}
                  </span>
                )}
              </div>
              <div className="d-flex flex-column align-items-center">
                <button type="submit" className="btn btn-primary btn-lg w-50">
                  Admit
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    );
  };



About.js
AddGrade.js
Admin.js
AdmitStudent.js
AllGrades.js
AllStudents.js
AllTeachers.js
Attendance.js
FeeStructure.js
GradeUpdate.js
HireTeacher.js
StudentUpdate.js
Teacher.js

is sab pages pe user tab hi ja sakta hai jab user signin kiya rahe, agar usne signin nhi kiya hai tab vo nhi ja sakta hai.
To tujhe ye funtionality daalni hai frontend me. Abhi sirf signin nad signout functionality hai but route restriction nhi hai vo tujhe daalna hai.